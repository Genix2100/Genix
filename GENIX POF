import hashlib
import time

class Block:
    def __init__(self, index, previous_hash, timestamp, data, hash):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.hash = hash

class Blockchain:
    def __init__(self):
        self.chain = []
        self.create_genesis_block()

    def create_genesis_block(self):
        # Creează blocul inițial (Genesis Block)
        genesis_block = Block(0, "0", int(time.time()), "Genesis Block", "0000")
        self.chain.append(genesis_block)

    def create_new_block(self, data):
        last_block = self.chain[-1]
        index = last_block.index + 1
        timestamp = int(time.time())
        hash = self.calculate_hash(index, last_block.hash, timestamp, data)
        new_block = Block(index, last_block.hash, timestamp, data, hash)
        self.chain.append(new_block)

    def calculate_hash(self, index, previous_hash, timestamp, data):
        block_string = f"{index}{previous_hash}{timestamp}{data}"
        return hashlib.sha256(block_string.encode('utf-8')).hexdigest()

    def mine_block(self, data):
        # Simulează minarea blocului
        while True:
            self.create_new_block(data)
            last_block = self.chain[-1]
            if last_block.hash[:4] == "0000":  # Se verifică proof of work (4 zerouri la început)
                print(f"Block mined: {last_block.hash}")
                break

# Creăm un blockchain
genix_blockchain = Blockchain()
genix_blockchain.mine_block("First mined block")
